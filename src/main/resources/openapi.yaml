openapi: 3.0.2

info:
  title: Protelis on the Web API
  description: REST API to communicate with Protelis backend
  version: "1.0"
  contact:
    name: "Niccol√≤ Maltoni"
    url: "https://github.com/NiccoMlt/Protelis-Web"
    email: "niccolo.maltoni@studio.unibo.it"
  license:
    name: "GNU General Public License v3"
    url: "https://github.com/NiccoMlt/Protelis-Web/blob/master/LICENSE"

servers:
  - url: "http://localhost:8080/api"
    description: Local executed server
  - url: "https://protelis-web.herokuapp.com/api"
    description: Master branch server on Heroku
  - url: "https://protelis-web-develop.herokuapp.com/api"
    description: Develop branch server on Heroku

tags:
  - name: protelis
    description: Protelis-related resource
  - name: lib
    description: Library resource
  - name: example
    description: Example resource

paths:
  /protelis/lib:
    get:
      tags:
        - protelis
        - lib
      summary: Get all available Protelis libraries
      description: |
        The API returns all the libraries for Protelis made available for this Web environment
      operationId: getLibs
      parameters:
        - in: query
          name: match
          schema:
            type: string
          description: Partial name of the library to use as a filter on final list
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Library'
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /protelis/lib/{name}:
    get:
      tags:
        - protelis
        - lib
      summary: Get Protelis library by name
      description: |
        The API returns a single library from the available ones, chosen by name
      operationId: getLib
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of Protelis library
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Library'
        404:
          description: Library not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - protelis
        - lib
      summary: Add new Protelis library with given name
      description: |
        The API creates a new Protelis library with a given name
      operationId: addLib
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of Protelis library
      requestBody:
        required: true
        description: The library to create; name should match path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Library'
      responses:
        204:
          description: Successful response
        400:
          description: Uploaded resource is not valid or acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Failed because no authentication was sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Failed because authenticated request does not have permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Content already exist; use PUT instead
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - protelis
        - lib
      summary: Add new Protelis library with given name
      description: |
        The API updates an existing Protelis library with a given name
      operationId: updateLib
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of Protelis library
      requestBody:
        required: true
        description: The library to update; name should match path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Library'
      responses:
        204:
          description: Successful response
        400:
          description: Uploaded resource is not valid or acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Failed because no authentication was sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Failed because authenticated request does not have permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Library not found; use POST instead
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /protelis/example:
    get:
      tags:
        - protelis
        - example
      summary: Get all available Protelis examples
      description: |
        The API returns all the examples for Protelis made available for this Web environment
      operationId: getExamples
      parameters:
        - in: query
          name: match
          schema:
            type: string
          description: Partial name of the example to use as a filter on final list
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Library'
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /protelis/example/{name}:
    get:
      tags:
        - protelis
        - example
      summary: Get Protelis example by name
      description: |
        The API returns a single example from the available ones, chosen by name
      operationId: getExample
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of Protelis example
      responses:
        200:
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Library'
        404:
          description: Library not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      tags:
        - protelis
        - example
      summary: Add new Protelis example with given name
      description: |
        The API creates a new example with a given name
      operationId: addExample
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the example
      requestBody:
        required: true
        description: The example to create; name should match path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Example'
      responses:
        204:
          description: Successful response
        400:
          description: Uploaded resource is not valid or acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Failed because no authentication was sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Failed because authenticated request does not have permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        409:
          description: Content already exist; use PUT instead
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      tags:
        - protelis
        - example
      summary: Add new Protelis example with given name
      description: |
        The API updates an existing example from the available ones, chosen by name
      operationId: updateExample
      parameters:
        - in: path
          name: name
          schema:
            type: string
          required: true
          description: Name of the example
      requestBody:
        required: true
        description: The example to update; name should match path
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Example'
      responses:
        204:
          description: Successful response
        400:
          description: Uploaded resource is not valid or acceptable
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        401:
          description: Failed because no authentication was sent
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        403:
          description: Failed because authenticated request does not have permissions
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        404:
          description: Library not found; use POST instead
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
        default:
          description: Unsuccessful response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
components:
  schemas:
    Example:
      type: object
      required:
        - name
        - files
      properties:
        name:
          type: string
        files:
          type: array
          items:
            $ref: '#/components/schemas/Library'
    Library:
      type: object
      required:
        - name
        - source
      properties:
        name:
          type: string
        code:
          type: string
        version:
          type: string
          default: 1.0.0
    Error:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string
